using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.Build.Evaluation;

namespace SourceCombiner
{
    /// <summary>
    /// Meant to run as after build event. This will combine multiple .cs files from a project into a single source file.
    /// There are quite a few assumptions made, such as:
    ///     - the code is well formed and follows coding conventions
    ///     - an IDE is being used to help format your code, reinforcing the above idea that its formatted nice
    ///     - all items marked as "compile" build action are .cs files
    ///     - source files are located at the same level or below the project file (simple project structure), sub folders are fine
    /// </summary>
    public sealed class SourceCombiner
    {

        private static readonly List<string> SourceFilesToIgnore = new List<string>
        {
            "AssemblyInfo.cs"
        };

        static void Main(string[] args)
        {
            if (args == null || args.Length < 2)
            {
                Console.WriteLine("You must provide at least 2 arguments. The first is the project file path and the second is the output file path.");
                return;
            }

            string projectFilePath = args[0];
            string outputFilePath = args[1];
            bool openFile = false;
            if (args.Length > 2)
            {
                Boolean.TryParse(args[2],out openFile);
            }

            var filesToParse = GetFilesToParse(projectFilePath);
            var namespaces = GetUniqueNamespaces(filesToParse);

            string outputSource = GenerateCombinedSource(namespaces,filesToParse);
            File.WriteAllText(outputFilePath,outputSource);

            if (openFile)
            {
                Process.Start(outputFilePath);
            }
        }

        private static string GenerateCombinedSource(List<string> namespaces,List<string> files)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(@"/*");
            sb.AppendLine($" * File generated by SourceCombiner.exe using {files.Count} project source files.");
            sb.AppendLine($" * Created On: {DateTime.Now}");
            sb.AppendLine(@"*/");

            foreach (var ns in namespaces.OrderBy(s => s))
            {
                sb.AppendLine("using " + ns + ";");
            }

            foreach (var file in files)
            {
                IEnumerable<string> sourceLines = File.ReadAllLines(file);
                sb.AppendLine(@"//*** SourceCombiner.exe: from " + Path.GetFileName(file) + " ***");
                var openingTag = "using ";
                foreach (var sourceLine in sourceLines)
                {
                    var trimmedLine = sourceLine.Trim().Replace("  ", " ");
                    var isUsingDir = trimmedLine.StartsWith(openingTag) && trimmedLine.EndsWith(";");
                    if (!string.IsNullOrWhiteSpace(sourceLine) && !isUsingDir)
                    {
                        sb.AppendLine(sourceLine);
                    }
                }
            }
    
            return sb.ToString();
        }

        private static List<string> GetFilesToParse(string projectFile)
        {
            Project project = new Project(projectFile);
            List<string> files = new List<string>();

            foreach (ProjectItem item in project.AllEvaluatedItems)
            {
                if (item.ItemType == "Compile" && !SourceFilesToIgnore.Contains(Path.GetFileName(item.EvaluatedInclude)))
                {
                    string projectFolder = Path.GetDirectoryName(projectFile);
                    // ReSharper disable once AssignNullToNotNullAttribute
                    string fullpath = Path.Combine(projectFolder, item.EvaluatedInclude);
                    files.Add(fullpath);
                }
            }

            return files;
        }


        private static List<string> GetUniqueNamespaces(List<string> files)
        {
            var names = new List<string>();
            var openingTag = "using ";
            var namespaceStartIndex = openingTag.Length;

            foreach (var file in files)
            {
                IEnumerable<string> sourceLines = File.ReadAllLines(file);

                foreach (var sourceLine in sourceLines)
                {
                    var trimmedLine = sourceLine.Trim().Replace("  ", " ");
                    if (trimmedLine.StartsWith(openingTag) && trimmedLine.EndsWith(";"))
                    {
                        var name = trimmedLine.Substring(namespaceStartIndex, trimmedLine.Length - namespaceStartIndex - 1);

                        if (!names.Contains(name))
                        {
                            names.Add(name);
                        }
                    }
                }
            }

            return names;
        }
    }
}
